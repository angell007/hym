{"version":3,"sources":["ng://ngx-mask/app/ngx-mask/config.ts","null","ng://ngx-mask/app/ngx-mask/mask-applier.service.ts","ng://ngx-mask/app/ngx-mask/mask.service.ts","ng://ngx-mask/app/ngx-mask/mask.directive.ts","ng://ngx-mask/app/ngx-mask/mask.pipe.ts","ng://ngx-mask/app/ngx-mask/ngx-mask.module.ts"],"names":["config","InjectionToken","NEW_CONFIG","INITIAL_CONFIG","initialConfig","clearIfNotMatch","showTemplate","dropSpecialCharacters","specialCharacters","patterns","0","pattern","RegExp","9","optional","A","S","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__generator","thisArg","body","f","y","t","g","_","label","sent","trys","ops","next","verb","throw","return","Symbol","iterator","this","n","v","step","op","TypeError","call","done","value","pop","length","push","e","MaskApplierService","_config","_shift","Set","maskSpecialCharacters","maskAvailablePatterns","prototype","applyMask","inputValue","maskExpression","position","cb","undefined","cursor","result","multi","inputArray","toString","split","i","inputSymbol","_checkSymbolMask","indexOf","shiftStep","test","slice","add","shift","newPosition","has","maskSymbol","Injectable","Inject","args","document","_elementRef","_renderer","_super","_this","_formElement","nativeElement","__extends","__","constructor","create","tslib_1.__extends","MaskService","isArray","onChange","_removeMask","applyValueChanges","maskedInput","activeElement","clearIfNotMatchFn","formElementProperty","_a","_b","__read","o","m","r","ar","error","name","setProperty","specialCharactersForRemove","replace","_regExpForRemove","map","item","join","DOCUMENT","ElementRef","Renderer2","_maskService","defineProperty","MaskDirective","_maskValue","_inputValue","onInput","el","caretShift","selectionStart","selectionEnd","_position","inputType","onBlur","onTouch","onPaste","Number","MAX_SAFE_INTEGER","writeValue","__awaiter","_arguments","P","generator","Promise","resolve","reject","fulfilled","rejected","then","apply","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","Directive","selector","providers","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","Input","HostListener","MaskPipe","transform","mask","Pipe","pure","NgxMaskModule","forRoot","configValue","ngModule","useValue","useFactory","_configFactory","deps","NgModule","exports","declarations","initConfig","__assign","assign","s","arguments"],"mappings":"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","sourcesContent":["import { InjectionToken } from '@angular/core';\n\nexport interface IConfig {\n  clearIfNotMatch: boolean;\n  showTemplate: boolean;\n  dropSpecialCharacters: boolean | string[];\n  specialCharacters: string[];\n  patterns: {\n    [character: string]: {\n      pattern: RegExp,\n      optional?: boolean\n    }\n  };\n}\n\nexport type optionsConfig = Partial<IConfig>;\nexport const config: InjectionToken<string> = new InjectionToken('config');\nexport const NEW_CONFIG: InjectionToken<string> = new InjectionToken('NEW_CONFIG');\nexport const INITIAL_CONFIG: InjectionToken<IConfig> = new InjectionToken('INITIAL_CONFIG');\n\nexport const initialConfig: IConfig = {\n  clearIfNotMatch: false,\n  showTemplate: false,\n  dropSpecialCharacters: true,\n  specialCharacters: ['/', '(', ')', '.', ':', '-', ' ', '+', ',', '@', '[', ']'],\n  patterns: {\n    '0': {\n      pattern: new RegExp('\\\\d'),\n    },\n    '9': {\n      pattern: new RegExp('\\\\d'),\n      optional: true\n    },\n    'A': {\n      pattern: new RegExp('\\[a-zA-Z0-9\\]')\n    },\n    'S': {\n      pattern: new RegExp('\\[a-zA-Z\\]')\n    }\n  }\n};\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Inject, Injectable } from '@angular/core';\nimport { config, IConfig } from './config';\n\n@Injectable()\nexport class MaskApplierService {\n\n  public maskSpecialCharacters: IConfig['specialCharacters'];\n  public maskAvailablePatterns: IConfig['patterns'];\n\n  private _shift: Set<number>;\n\n  public constructor(\n    @Inject(config) protected _config: IConfig\n  ) {\n    this._shift = new Set();\n    this.maskSpecialCharacters = this._config!.specialCharacters;\n    this.maskAvailablePatterns = this._config.patterns;\n  }\n\n  public applyMask(\n    inputValue: string,\n    maskExpression: string,\n    position: number = 0,\n    cb: Function = () => {}\n  ): string {\n    if (inputValue === undefined || inputValue === null || maskExpression === undefined) {\n      return '';\n    }\n\n    let cursor: number = 0;\n    let result: string = '';\n    let multi: boolean = false;\n\n    const inputArray: string[] = inputValue.toString().split('');\n\n    // tslint:disable-next-line\n    for (let i: number = 0, inputSymbol: string = inputArray[0]; i < inputArray.length; i++, inputSymbol = inputArray[i]) {\n      if (cursor === maskExpression.length) {\n        break;\n      }\n\n      if (this._checkSymbolMask(inputSymbol, maskExpression[cursor]) && maskExpression[cursor + 1] === '?') {\n        result += inputSymbol;\n        cursor += 2;\n      } else if (this._checkSymbolMask(inputSymbol, maskExpression[cursor]) && maskExpression[cursor + 1] === '*') {\n        result += inputSymbol;\n        multi = true;\n      } else if (\n        maskExpression[cursor + 1] === '*' && multi\n        && this._checkSymbolMask(inputSymbol, maskExpression[cursor + 2])\n      ) {\n        result += inputSymbol;\n        cursor += 3;\n        multi = false;\n      } else if (maskExpression[cursor + 1] === '?' && this._checkSymbolMask(inputSymbol, maskExpression[cursor + 2])) {\n        result += inputSymbol;\n        cursor += 3;\n      } else if (this._checkSymbolMask(inputSymbol, maskExpression[cursor])) {\n        result += inputSymbol;\n        cursor++;\n      } else if (this.maskSpecialCharacters.indexOf(maskExpression[cursor]) !== -1) {\n        result += maskExpression[cursor];\n        cursor++;\n        const shiftStep: number = /\\*|\\?/g.test(maskExpression.slice(0, cursor))\n          ? inputArray.length\n          : cursor;\n        this._shift.add(shiftStep);\n        i--;\n      } else if (this.maskSpecialCharacters.indexOf(inputSymbol) > -1\n        && this.maskAvailablePatterns[maskExpression[cursor]]\n        && this.maskAvailablePatterns[maskExpression[cursor]].optional) {\n        cursor++;\n        i--;\n      }\n    }\n\n    if (result.length + 1 === maskExpression.length\n      && this.maskSpecialCharacters.indexOf(maskExpression[maskExpression.length - 1]) !== -1) {\n      result += maskExpression[maskExpression.length - 1];\n    }\n\n    let shift: number = 1;\n    let newPosition: number = position + 1;\n\n    while (this._shift.has(newPosition)) {\n      shift++;\n      newPosition++;\n    }\n\n    cb(this._shift.has(position) ? shift : 0);\n\n    return result;\n  }\n\n  private _checkSymbolMask(inputSymbol: string, maskSymbol: string): boolean {\n    return inputSymbol === maskSymbol\n      || this.maskAvailablePatterns[maskSymbol]\n      && this.maskAvailablePatterns[maskSymbol].pattern\n      && this.maskAvailablePatterns[maskSymbol].pattern.test(inputSymbol);\n  }\n}\n","import { ElementRef, EventEmitter, Inject, Injectable, Renderer2 } from '@angular/core';\nimport { config, IConfig } from './config';\nimport { DOCUMENT } from '@angular/common';\nimport { MaskApplierService } from './mask-applier.service';\n\n@Injectable()\nexport class MaskService extends MaskApplierService {\n\n  public dropSpecialCharacters: IConfig['dropSpecialCharacters'];\n  public showTemplate: IConfig['showTemplate'];\n  public clearIfNotMatch: IConfig['clearIfNotMatch'];\n  public maskExpression: string = '';\n  public maskSpecialCharacters: IConfig['specialCharacters'];\n  public maskAvailablePatterns: IConfig['patterns'];\n\n  private _formElement: HTMLInputElement;\n\n  // tslint:disable-next-line\n  public onChange = (_: any) => { };\n\n  public onTouch = () => { };\n\n  public constructor(\n    // tslint:disable-next-line\n    @Inject(DOCUMENT) private document: any,\n    @Inject(config) protected _config: IConfig,\n    private _elementRef: ElementRef,\n    private _renderer: Renderer2,\n  ) {\n    super(_config);\n\n    this.clearIfNotMatch = this._config.clearIfNotMatch;\n    this.dropSpecialCharacters = this._config.dropSpecialCharacters;\n    this.maskSpecialCharacters = this._config!.specialCharacters;\n    this.maskAvailablePatterns = this._config.patterns;\n\n    this._formElement = this._elementRef.nativeElement;\n  }\n\n  public applyMask(inputValue: string, maskExpression: string, position: number = 0, cb: Function = () => { }): string {\n    const result: string = super.applyMask(inputValue, maskExpression, position, cb);\n\n    Array.isArray(this.dropSpecialCharacters)\n      ? this.onChange(this._removeMask(result, this.dropSpecialCharacters))\n      : this.dropSpecialCharacters === true\n        ? this.onChange(this._removeMask(result, this.maskSpecialCharacters))\n        : this.onChange(result);\n\n    return result;\n  }\n\n  public applyValueChanges(position: number = 0, cb: Function = () => { }): void {\n    const maskedInput: string = this.applyMask(this._formElement.value, this.maskExpression, position, cb);\n\n    this._formElement.value = maskedInput;\n\n    if (this._formElement === this.document.activeElement) {\n      return;\n    }\n    this.clearIfNotMatchFn();\n  }\n\n  public clearIfNotMatchFn(): void {\n    if (\n      this.clearIfNotMatch === true && this.maskExpression.length\n      !== this._formElement.value.length) {\n      this.formElementProperty = ['value', ''];\n    }\n  }\n\n  public set formElementProperty([name, value]: [string, string | boolean]) {\n    this._renderer.setProperty(this._formElement, name, value);\n  }\n\n  private _removeMask(value: string, specialCharactersForRemove: string[]): string {\n    return value\n      ? value.replace(this._regExpForRemove(specialCharactersForRemove), '')\n      : value;\n  }\n\n  private _regExpForRemove(specialCharactersForRemove: string[]): RegExp {\n    return new RegExp(specialCharactersForRemove\n      .map((item: string) => `\\\\${item}`)\n      .join('|'), 'gi');\n  }\n\n}","import { Directive, forwardRef, HostListener, Inject, Input } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { MaskService } from './mask.service';\nimport { IConfig } from './config';\n\n@Directive({\n    selector: '[mask]',\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => MaskDirective),\n            multi: true\n        },\n        MaskService\n    ],\n})\nexport class MaskDirective implements ControlValueAccessor {\n\n    private _maskValue: string;\n    private _inputValue: string;\n    private _position: number | null = null;\n\n    // tslint:disable-next-line\n    public onChange = (_: any) => { };\n\n    public onTouch = () => { };\n\n    public constructor(\n        // tslint:disable-next-line\n        @Inject(DOCUMENT) private document: any,\n        private _maskService: MaskService,\n    ) { }\n\n    @Input('mask')\n    public set maskExpression(value: string) {\n        this._maskValue = value || '';\n        if (!this._maskValue) {\n            return;\n        }\n        this._maskService.maskExpression = this._maskValue;\n\n        this._maskService.formElementProperty = [\n            'value',\n            this._maskService.applyMask(this._inputValue, this._maskService.maskExpression)\n        ];\n    }\n\n    @Input()\n    public set specialCharacters(value: IConfig['specialCharacters']) {\n        if (!value || !Array.isArray(value) || Array.isArray(value) && !value.length) {\n            return;\n        }\n        this._maskService.maskSpecialCharacters = value;\n    }\n\n    @Input()\n    public set patterns(value: IConfig['patterns']) {\n        if (!value) {\n            return;\n        }\n        this._maskService.maskAvailablePatterns = value;\n    }\n\n    @Input()\n    public set dropSpecialCharacters(value: IConfig['dropSpecialCharacters']) {\n        this._maskService.dropSpecialCharacters = value;\n    }\n\n    @Input()\n    public set showTemplate(value: IConfig['showTemplate']) {\n        this._maskService.showTemplate = value;\n    }\n\n    @Input()\n    public set clearIfNotMatch(value: IConfig['clearIfNotMatch']) {\n        this._maskService.clearIfNotMatch = value;\n    }\n\n    @HostListener('input', ['$event'])\n    public onInput(e: KeyboardEvent): void {\n        const el: HTMLInputElement = (e.target as HTMLInputElement);\n        this._inputValue = el.value;\n        if (!this._maskValue) {\n            this.onChange(el.value);\n            return;\n        }\n        const position: number = el.selectionStart as number;\n        let caretShift: number = 0;\n\n        this._maskService.applyValueChanges(\n            position,\n            (shift: number) => caretShift = shift\n        );\n\n        // only set the selection if the element is active\n        if (this.document.activeElement !== el) {\n            return;\n        }\n        el.selectionStart = el.selectionEnd = this._position !== null\n            ? this._position\n            : position + (\n            // tslint:disable-next-line\n            (e as any).inputType === 'deleteContentBackward'\n                ? 0\n                : caretShift\n        );\n        this._position = null;\n    }\n\n    @HostListener('blur')\n    public onBlur(): void {\n        this._maskService.clearIfNotMatchFn();\n        this.onTouch();\n    }\n\n    @HostListener('paste')\n    public onPaste(): void {\n        this._position = Number.MAX_SAFE_INTEGER;\n    }\n\n\n    /** It writes the value in the input */\n    public async writeValue(inputValue: string): Promise<void> {\n        if (inputValue === undefined) {\n            return;\n        }\n        inputValue && this._maskService.maskExpression\n            ? this._maskService.formElementProperty = [\n                'value',\n                this._maskService.applyMask(inputValue, this._maskService.maskExpression)\n            ]\n            : this._maskService.formElementProperty = ['value', inputValue];\n        this._inputValue = inputValue;\n    }\n\n    // tslint:disable-next-line\n    public registerOnChange(fn: any): void {\n        this.onChange = fn;\n        this._maskService.onChange = this.onChange;\n    }\n\n    // tslint:disable-next-line\n    public registerOnTouched(fn: any): void {\n        this.onTouch = fn;\n    }\n\n    /** It disables the input element */\n    public setDisabledState(isDisabled: boolean): void {\n        this._maskService.formElementProperty = ['disabled', isDisabled];\n    }\n\n\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { MaskApplierService } from './mask-applier.service';\n\n@Pipe({\n  name: 'mask',\n  pure: true\n})\nexport class MaskPipe implements PipeTransform {\n\n  public constructor(private _maskService: MaskApplierService) { }\n\n  public transform(value: string|number, mask: string): string {\n    return this._maskService.applyMask(`${value}`, mask);\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\n\nimport { config, INITIAL_CONFIG, initialConfig, NEW_CONFIG, optionsConfig } from './config';\nimport { MaskApplierService } from './mask-applier.service';\nimport { MaskDirective } from './mask.directive';\nimport { MaskPipe } from './mask.pipe';\n\n@NgModule({\n  providers: [MaskApplierService],\n  exports: [MaskDirective, MaskPipe],\n  declarations: [MaskDirective, MaskPipe]\n})\nexport class NgxMaskModule {\n\n  public static forRoot(configValue?: optionsConfig): ModuleWithProviders {\n    return {\n      ngModule: NgxMaskModule,\n      providers: [\n        {\n          provide: NEW_CONFIG,\n          useValue: configValue\n        },\n        {\n          provide: INITIAL_CONFIG,\n          useValue: initialConfig\n        },\n        {\n          provide: config,\n          useFactory: _configFactory,\n          deps: [INITIAL_CONFIG, NEW_CONFIG]\n        },\n      ]\n    };\n  }\n}\n\n/**\n * @internal\n */\nexport function _configFactory\n(initConfig: optionsConfig, configValue: optionsConfig | (() => optionsConfig)): Function | optionsConfig {\n  return (typeof configValue === 'function') ? configValue() : { ...initConfig, ...configValue };\n}\n"]}