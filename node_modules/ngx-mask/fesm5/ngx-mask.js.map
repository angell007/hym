{"version":3,"file":"ngx-mask.js.map","sources":["ng://ngx-mask/app/ngx-mask/config.ts","ng://ngx-mask/app/ngx-mask/mask-applier.service.ts","ng://ngx-mask/app/ngx-mask/mask.service.ts","ng://ngx-mask/app/ngx-mask/mask.directive.ts","ng://ngx-mask/app/ngx-mask/mask.pipe.ts","ng://ngx-mask/app/ngx-mask/ngx-mask.module.ts"],"sourcesContent":["import { InjectionToken } from '@angular/core';\n\nexport interface IConfig {\n  clearIfNotMatch: boolean;\n  showTemplate: boolean;\n  dropSpecialCharacters: boolean | string[];\n  specialCharacters: string[];\n  patterns: {\n    [character: string]: {\n      pattern: RegExp,\n      optional?: boolean\n    }\n  };\n}\n\nexport type optionsConfig = Partial<IConfig>;\nexport const config: InjectionToken<string> = new InjectionToken('config');\nexport const NEW_CONFIG: InjectionToken<string> = new InjectionToken('NEW_CONFIG');\nexport const INITIAL_CONFIG: InjectionToken<IConfig> = new InjectionToken('INITIAL_CONFIG');\n\nexport const initialConfig: IConfig = {\n  clearIfNotMatch: false,\n  showTemplate: false,\n  dropSpecialCharacters: true,\n  specialCharacters: ['/', '(', ')', '.', ':', '-', ' ', '+', ',', '@', '[', ']'],\n  patterns: {\n    '0': {\n      pattern: new RegExp('\\\\d'),\n    },\n    '9': {\n      pattern: new RegExp('\\\\d'),\n      optional: true\n    },\n    'A': {\n      pattern: new RegExp('\\[a-zA-Z0-9\\]')\n    },\n    'S': {\n      pattern: new RegExp('\\[a-zA-Z\\]')\n    }\n  }\n};\n","import { Inject, Injectable } from '@angular/core';\nimport { config, IConfig } from './config';\n\n@Injectable()\nexport class MaskApplierService {\n\n  public maskSpecialCharacters: IConfig['specialCharacters'];\n  public maskAvailablePatterns: IConfig['patterns'];\n\n  private _shift: Set<number>;\n\n  public constructor(\n    @Inject(config) protected _config: IConfig\n  ) {\n    this._shift = new Set();\n    this.maskSpecialCharacters = this._config!.specialCharacters;\n    this.maskAvailablePatterns = this._config.patterns;\n  }\n\n  public applyMask(\n    inputValue: string,\n    maskExpression: string,\n    position: number = 0,\n    cb: Function = () => {}\n  ): string {\n    if (inputValue === undefined || inputValue === null || maskExpression === undefined) {\n      return '';\n    }\n\n    let cursor: number = 0;\n    let result: string = '';\n    let multi: boolean = false;\n\n    const inputArray: string[] = inputValue.toString().split('');\n\n    // tslint:disable-next-line\n    for (let i: number = 0, inputSymbol: string = inputArray[0]; i < inputArray.length; i++, inputSymbol = inputArray[i]) {\n      if (cursor === maskExpression.length) {\n        break;\n      }\n\n      if (this._checkSymbolMask(inputSymbol, maskExpression[cursor]) && maskExpression[cursor + 1] === '?') {\n        result += inputSymbol;\n        cursor += 2;\n      } else if (this._checkSymbolMask(inputSymbol, maskExpression[cursor]) && maskExpression[cursor + 1] === '*') {\n        result += inputSymbol;\n        multi = true;\n      } else if (\n        maskExpression[cursor + 1] === '*' && multi\n        && this._checkSymbolMask(inputSymbol, maskExpression[cursor + 2])\n      ) {\n        result += inputSymbol;\n        cursor += 3;\n        multi = false;\n      } else if (maskExpression[cursor + 1] === '?' && this._checkSymbolMask(inputSymbol, maskExpression[cursor + 2])) {\n        result += inputSymbol;\n        cursor += 3;\n      } else if (this._checkSymbolMask(inputSymbol, maskExpression[cursor])) {\n        result += inputSymbol;\n        cursor++;\n      } else if (this.maskSpecialCharacters.indexOf(maskExpression[cursor]) !== -1) {\n        result += maskExpression[cursor];\n        cursor++;\n        const shiftStep: number = /\\*|\\?/g.test(maskExpression.slice(0, cursor))\n          ? inputArray.length\n          : cursor;\n        this._shift.add(shiftStep);\n        i--;\n      } else if (this.maskSpecialCharacters.indexOf(inputSymbol) > -1\n        && this.maskAvailablePatterns[maskExpression[cursor]]\n        && this.maskAvailablePatterns[maskExpression[cursor]].optional) {\n        cursor++;\n        i--;\n      }\n    }\n\n    if (result.length + 1 === maskExpression.length\n      && this.maskSpecialCharacters.indexOf(maskExpression[maskExpression.length - 1]) !== -1) {\n      result += maskExpression[maskExpression.length - 1];\n    }\n\n    let shift: number = 1;\n    let newPosition: number = position + 1;\n\n    while (this._shift.has(newPosition)) {\n      shift++;\n      newPosition++;\n    }\n\n    cb(this._shift.has(position) ? shift : 0);\n\n    return result;\n  }\n\n  private _checkSymbolMask(inputSymbol: string, maskSymbol: string): boolean {\n    return inputSymbol === maskSymbol\n      || this.maskAvailablePatterns[maskSymbol]\n      && this.maskAvailablePatterns[maskSymbol].pattern\n      && this.maskAvailablePatterns[maskSymbol].pattern.test(inputSymbol);\n  }\n}\n","import { ElementRef, EventEmitter, Inject, Injectable, Renderer2 } from '@angular/core';\nimport { config, IConfig } from './config';\nimport { DOCUMENT } from '@angular/common';\nimport { MaskApplierService } from './mask-applier.service';\n\n@Injectable()\nexport class MaskService extends MaskApplierService {\n\n  public dropSpecialCharacters: IConfig['dropSpecialCharacters'];\n  public showTemplate: IConfig['showTemplate'];\n  public clearIfNotMatch: IConfig['clearIfNotMatch'];\n  public maskExpression: string = '';\n  public maskSpecialCharacters: IConfig['specialCharacters'];\n  public maskAvailablePatterns: IConfig['patterns'];\n\n  private _formElement: HTMLInputElement;\n\n  // tslint:disable-next-line\n  public onChange = (_: any) => { };\n\n  public onTouch = () => { };\n\n  public constructor(\n    // tslint:disable-next-line\n    @Inject(DOCUMENT) private document: any,\n    @Inject(config) protected _config: IConfig,\n    private _elementRef: ElementRef,\n    private _renderer: Renderer2,\n  ) {\n    super(_config);\n\n    this.clearIfNotMatch = this._config.clearIfNotMatch;\n    this.dropSpecialCharacters = this._config.dropSpecialCharacters;\n    this.maskSpecialCharacters = this._config!.specialCharacters;\n    this.maskAvailablePatterns = this._config.patterns;\n\n    this._formElement = this._elementRef.nativeElement;\n  }\n\n  public applyMask(inputValue: string, maskExpression: string, position: number = 0, cb: Function = () => { }): string {\n    const result: string = super.applyMask(inputValue, maskExpression, position, cb);\n\n    Array.isArray(this.dropSpecialCharacters)\n      ? this.onChange(this._removeMask(result, this.dropSpecialCharacters))\n      : this.dropSpecialCharacters === true\n        ? this.onChange(this._removeMask(result, this.maskSpecialCharacters))\n        : this.onChange(result);\n\n    return result;\n  }\n\n  public applyValueChanges(position: number = 0, cb: Function = () => { }): void {\n    const maskedInput: string = this.applyMask(this._formElement.value, this.maskExpression, position, cb);\n\n    this._formElement.value = maskedInput;\n\n    if (this._formElement === this.document.activeElement) {\n      return;\n    }\n    this.clearIfNotMatchFn();\n  }\n\n  public clearIfNotMatchFn(): void {\n    if (\n      this.clearIfNotMatch === true && this.maskExpression.length\n      !== this._formElement.value.length) {\n      this.formElementProperty = ['value', ''];\n    }\n  }\n\n  public set formElementProperty([name, value]: [string, string | boolean]) {\n    this._renderer.setProperty(this._formElement, name, value);\n  }\n\n  private _removeMask(value: string, specialCharactersForRemove: string[]): string {\n    return value\n      ? value.replace(this._regExpForRemove(specialCharactersForRemove), '')\n      : value;\n  }\n\n  private _regExpForRemove(specialCharactersForRemove: string[]): RegExp {\n    return new RegExp(specialCharactersForRemove\n      .map((item: string) => `\\\\${item}`)\n      .join('|'), 'gi');\n  }\n\n}","import { Directive, forwardRef, HostListener, Inject, Input } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { MaskService } from './mask.service';\nimport { IConfig } from './config';\n\n@Directive({\n    selector: '[mask]',\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => MaskDirective),\n            multi: true\n        },\n        MaskService\n    ],\n})\nexport class MaskDirective implements ControlValueAccessor {\n\n    private _maskValue: string;\n    private _inputValue: string;\n    private _position: number | null = null;\n\n    // tslint:disable-next-line\n    public onChange = (_: any) => { };\n\n    public onTouch = () => { };\n\n    public constructor(\n        // tslint:disable-next-line\n        @Inject(DOCUMENT) private document: any,\n        private _maskService: MaskService,\n    ) { }\n\n    @Input('mask')\n    public set maskExpression(value: string) {\n        this._maskValue = value || '';\n        if (!this._maskValue) {\n            return;\n        }\n        this._maskService.maskExpression = this._maskValue;\n\n        this._maskService.formElementProperty = [\n            'value',\n            this._maskService.applyMask(this._inputValue, this._maskService.maskExpression)\n        ];\n    }\n\n    @Input()\n    public set specialCharacters(value: IConfig['specialCharacters']) {\n        if (!value || !Array.isArray(value) || Array.isArray(value) && !value.length) {\n            return;\n        }\n        this._maskService.maskSpecialCharacters = value;\n    }\n\n    @Input()\n    public set patterns(value: IConfig['patterns']) {\n        if (!value) {\n            return;\n        }\n        this._maskService.maskAvailablePatterns = value;\n    }\n\n    @Input()\n    public set dropSpecialCharacters(value: IConfig['dropSpecialCharacters']) {\n        this._maskService.dropSpecialCharacters = value;\n    }\n\n    @Input()\n    public set showTemplate(value: IConfig['showTemplate']) {\n        this._maskService.showTemplate = value;\n    }\n\n    @Input()\n    public set clearIfNotMatch(value: IConfig['clearIfNotMatch']) {\n        this._maskService.clearIfNotMatch = value;\n    }\n\n    @HostListener('input', ['$event'])\n    public onInput(e: KeyboardEvent): void {\n        const el: HTMLInputElement = (e.target as HTMLInputElement);\n        this._inputValue = el.value;\n        if (!this._maskValue) {\n            this.onChange(el.value);\n            return;\n        }\n        const position: number = el.selectionStart as number;\n        let caretShift: number = 0;\n\n        this._maskService.applyValueChanges(\n            position,\n            (shift: number) => caretShift = shift\n        );\n\n        // only set the selection if the element is active\n        if (this.document.activeElement !== el) {\n            return;\n        }\n        el.selectionStart = el.selectionEnd = this._position !== null\n            ? this._position\n            : position + (\n            // tslint:disable-next-line\n            (e as any).inputType === 'deleteContentBackward'\n                ? 0\n                : caretShift\n        );\n        this._position = null;\n    }\n\n    @HostListener('blur')\n    public onBlur(): void {\n        this._maskService.clearIfNotMatchFn();\n        this.onTouch();\n    }\n\n    @HostListener('paste')\n    public onPaste(): void {\n        this._position = Number.MAX_SAFE_INTEGER;\n    }\n\n\n    /** It writes the value in the input */\n    public async writeValue(inputValue: string): Promise<void> {\n        if (inputValue === undefined) {\n            return;\n        }\n        inputValue && this._maskService.maskExpression\n            ? this._maskService.formElementProperty = [\n                'value',\n                this._maskService.applyMask(inputValue, this._maskService.maskExpression)\n            ]\n            : this._maskService.formElementProperty = ['value', inputValue];\n        this._inputValue = inputValue;\n    }\n\n    // tslint:disable-next-line\n    public registerOnChange(fn: any): void {\n        this.onChange = fn;\n        this._maskService.onChange = this.onChange;\n    }\n\n    // tslint:disable-next-line\n    public registerOnTouched(fn: any): void {\n        this.onTouch = fn;\n    }\n\n    /** It disables the input element */\n    public setDisabledState(isDisabled: boolean): void {\n        this._maskService.formElementProperty = ['disabled', isDisabled];\n    }\n\n\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { MaskApplierService } from './mask-applier.service';\n\n@Pipe({\n  name: 'mask',\n  pure: true\n})\nexport class MaskPipe implements PipeTransform {\n\n  public constructor(private _maskService: MaskApplierService) { }\n\n  public transform(value: string|number, mask: string): string {\n    return this._maskService.applyMask(`${value}`, mask);\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\n\nimport { config, INITIAL_CONFIG, initialConfig, NEW_CONFIG, optionsConfig } from './config';\nimport { MaskApplierService } from './mask-applier.service';\nimport { MaskDirective } from './mask.directive';\nimport { MaskPipe } from './mask.pipe';\n\n@NgModule({\n  providers: [MaskApplierService],\n  exports: [MaskDirective, MaskPipe],\n  declarations: [MaskDirective, MaskPipe]\n})\nexport class NgxMaskModule {\n\n  public static forRoot(configValue?: optionsConfig): ModuleWithProviders {\n    return {\n      ngModule: NgxMaskModule,\n      providers: [\n        {\n          provide: NEW_CONFIG,\n          useValue: configValue\n        },\n        {\n          provide: INITIAL_CONFIG,\n          useValue: initialConfig\n        },\n        {\n          provide: config,\n          useFactory: _configFactory,\n          deps: [INITIAL_CONFIG, NEW_CONFIG]\n        },\n      ]\n    };\n  }\n}\n\n/**\n * @internal\n */\nexport function _configFactory\n(initConfig: optionsConfig, configValue: optionsConfig | (() => optionsConfig)): Function | optionsConfig {\n  return (typeof configValue === 'function') ? configValue() : { ...initConfig, ...configValue };\n}\n"],"names":["tslib_1.__extends"],"mappings":"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"}
