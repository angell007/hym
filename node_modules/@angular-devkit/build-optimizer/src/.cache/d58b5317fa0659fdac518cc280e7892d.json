{"remainingRequest":"C:\\laragon\\www\\hym\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!C:\\laragon\\www\\hym\\node_modules\\ng2-scroll-to\\src\\scrollTo.js","dependencies":[{"path":"C:\\laragon\\www\\hym\\node_modules\\ng2-scroll-to\\src\\scrollTo.js","mtime":1614017472555},{"path":"C:\\laragon\\www\\hym\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1614017462316},{"path":"C:\\laragon\\www\\hym\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1614017454693}],"contextDependencies":[],"result":["\"use strict\";\nvar __decorate = /*@__PURE__*/ require(\"tslib\").__decorate;\nvar __metadata = /*@__PURE__*/ require(\"tslib\").__metadata;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar core_1 = require(\"@angular/core\");\nvar ScrollTo = /*@__PURE__*/ (function () {\n    function ScrollTo(el) {\n        this.el = el;\n    }\n    ScrollTo.prototype.onClick = function (event) {\n        event.preventDefault();\n        var scrollEnd;\n        if (this.scrollYTarget) {\n            if (isNaN(Number(this.scrollYTarget))) {\n                throw 'scrollYTarget must have numerical values';\n            }\n            scrollEnd = this.scrollYTarget;\n        }\n        var target;\n        if (scrollEnd == null) {\n            target = this.getTarget();\n            if (!target) {\n                console.warn('target element do not exist');\n                return;\n            }\n            scrollEnd = target.offsetTop;\n        }\n        var scrollingElement = this.getScrollableElement(target);\n        try {\n            if (scrollingElement === document.body) {\n                this.smoothScroll(document.documentElement, scrollEnd);\n            }\n        }\n        catch (e) {\n            console.warn(e);\n        }\n        this.smoothScroll(scrollingElement, scrollEnd);\n    };\n    ScrollTo.prototype.getScrollableElement = function (target) {\n        var scrollableElement;\n        if (this.scrollableElementSelector) {\n            scrollableElement = document.querySelector(this.scrollableElementSelector);\n        }\n        else if (target != null) {\n            scrollableElement = this.findScrollableParent(target);\n        }\n        else {\n            scrollableElement = this.findMainScrollableElement();\n        }\n        return scrollableElement;\n    };\n    ScrollTo.prototype.getTarget = function () {\n        var target;\n        if (this.scrollTargetSelector) {\n            target = document.querySelector(this.scrollTargetSelector);\n        }\n        else if (this.el.nativeElement.href) {\n            var href = '#' + this.el.nativeElement.href.split('#')[1];\n            target = document.querySelector(href);\n        }\n        return target;\n    };\n    ScrollTo.prototype.smoothScroll = function (element, end) {\n        var _this = this;\n        var duration = 500;\n        var clock = Date.now();\n        var requestAnimationFrame = window.requestAnimationFrame || function (fn) {\n            window.setTimeout(fn, 15);\n        };\n        var start = element.scrollTop;\n        var step = function () {\n            var elapsed = Date.now() - clock;\n            var position = _this.position(start, end, elapsed, duration);\n            element.scrollTop = position;\n            if (elapsed > duration) {\n            }\n            else {\n                requestAnimationFrame(step);\n            }\n        };\n        step();\n    };\n    // ease in out function thanks to:\n    // http://blog.greweb.fr/2012/02/bezier-curve-based-easing-functions-from-concept-to-implementation/\n    ScrollTo.prototype.easeInOutCubic = function (t) {\n        return t < .5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1;\n    };\n    /**\n      * calculate the scroll position we should be in\n      * given the start and end point of the scroll\n      * the time elapsed from the beginning of the scroll\n      * and the total duration of the scroll (default 500ms)\n      */\n    ScrollTo.prototype.position = function (start, end, elapsed, duration) {\n        if (elapsed > duration) {\n            return end;\n        }\n        ;\n        return start + (end - start) * this.easeInOutCubic(elapsed / duration); // <-- you can change the easing funtion there\n        // return start + (end - start) * (elapsed / duration); // <-- this would give a linear scroll\n    };\n    /**\n      * finds scrollable parent of an element\n      * @method findScrollableParent\n      * @param {HTMLElement} element\n      * @returns {HTMLElement} element\n      */\n    ScrollTo.prototype.findScrollableParent = function (element) {\n        var isBody, hasScrollableSpace, hasVisibleOverflow;\n        do {\n            element = element.parentElement;\n            // set condition variables\n            isBody = element === document.body;\n            hasScrollableSpace = element.clientHeight < element.scrollHeight;\n            hasVisibleOverflow = getComputedStyle(element, null).overflow === 'visible';\n        } while (!isBody && !(hasScrollableSpace && !hasVisibleOverflow));\n        return element;\n    };\n    /**\n      * finds scrollable parent of an element\n      * @method findMainScrollableElement\n      * @returns {HTMLElement} element\n      */\n    ScrollTo.prototype.findMainScrollableElement = function () {\n        var element = this.findScrollableChild(document.body);\n        if (element != null) {\n            return element;\n        }\n        return document.body;\n    };\n    ScrollTo.prototype.isScrollable = function (element) {\n        var hasScrollableSpace = element.clientHeight < element.scrollHeight;\n        var hasVisibleOverflow = getComputedStyle(element, null).overflow === 'visible';\n        return hasScrollableSpace && !hasVisibleOverflow;\n    };\n    ScrollTo.prototype.isScriptTag = function (element) {\n        return element.nodeName === 'SCRIPT';\n    };\n    ScrollTo.prototype.findScrollableChild = function (inputElement) {\n        var scrollableElement;\n        var i = 0;\n        if (this.isScriptTag(inputElement)) {\n            return null;\n        }\n        while (scrollableElement == null && i < inputElement.childElementCount) {\n            var element = inputElement.children[i];\n            if (this.isScrollable(element)) {\n                scrollableElement = element;\n                return element;\n            }\n            scrollableElement = this.findScrollableChild(element);\n            i++;\n        }\n        return scrollableElement;\n    };\n    return ScrollTo;\n}());\n__decorate([\n    core_1.Input(),\n    __metadata(\"design:type\", String)\n], ScrollTo.prototype, \"scrollableElementSelector\", void 0);\n__decorate([\n    core_1.Input(),\n    __metadata(\"design:type\", String)\n], ScrollTo.prototype, \"scrollTargetSelector\", void 0);\n__decorate([\n    core_1.Input(),\n    __metadata(\"design:type\", Number)\n], ScrollTo.prototype, \"scrollYTarget\", void 0);\n__decorate([\n    core_1.HostListener('click', ['$event']),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [MouseEvent]),\n    __metadata(\"design:returntype\", void 0)\n], ScrollTo.prototype, \"onClick\", null);\nScrollTo = __decorate([\n    core_1.Directive({\n        selector: '[scrollTo]'\n    })\n], ScrollTo);\nexports.ScrollTo = ScrollTo;\n",null]}