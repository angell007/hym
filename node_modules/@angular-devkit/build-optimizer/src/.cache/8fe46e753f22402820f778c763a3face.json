{"remainingRequest":"C:\\Users\\Gerente CorvusLab\\Desktop\\HYM\\hym\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!C:\\Users\\Gerente CorvusLab\\Desktop\\HYM\\hym\\node_modules\\ng2-sticky-kit\\ng2-sticky-kit.es5.js","dependencies":[{"path":"C:\\Users\\Gerente CorvusLab\\Desktop\\HYM\\hym\\node_modules\\ng2-sticky-kit\\ng2-sticky-kit.es5.js","mtime":1593727279610},{"path":"C:\\Users\\Gerente CorvusLab\\Desktop\\HYM\\hym\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1593727218936},{"path":"C:\\Users\\Gerente CorvusLab\\Desktop\\HYM\\hym\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1593727155863}],"contextDependencies":[],"result":["import { Component, ElementRef, EventEmitter, HostListener, Input, NgModule, Output } from '@angular/core';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar StickyComponent = /*@__PURE__*/ (function () {\n    function StickyComponent(element) {\n        this.element = element;\n        this.zIndex = 10;\n        this.width = 'auto';\n        this.offsetTop = 0;\n        this.offsetBottom = 0;\n        this.start = 0;\n        this.stickClass = 'sticky';\n        this.endStickClass = 'sticky-end';\n        this.mediaQuery = '';\n        this.parentMode = true;\n        this.orientation = 'none';\n        this.activated = new EventEmitter();\n        this.deactivated = new EventEmitter();\n        this.reset = new EventEmitter();\n        this.isStuck = false;\n    }\n    /**\n     * @return {?}\n     */\n    StickyComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n            this.elem = this.element.nativeElement;\n        };\n    /**\n     * @return {?}\n     */\n    StickyComponent.prototype.ngAfterViewInit = /**\n     * @return {?}\n     */\n        function () {\n            // define scroll container as parent element\n            this.container = this.elem.parentNode;\n            this.defineOriginalDimensions();\n            this.sticker();\n        };\n    /**\n     * @return {?}\n     */\n    StickyComponent.prototype.onChange = /**\n     * @return {?}\n     */\n        function () {\n            this.sticker();\n        };\n    /**\n     * @return {?}\n     */\n    StickyComponent.prototype.defineOriginalDimensions = /**\n     * @return {?}\n     */\n        function () {\n            this.originalCss = {\n                zIndex: this.getCssValue(this.elem, 'zIndex'),\n                position: this.getCssValue(this.elem, 'position'),\n                top: this.getCssValue(this.elem, 'top'),\n                right: this.getCssValue(this.elem, 'right'),\n                left: this.getCssValue(this.elem, 'left'),\n                bottom: this.getCssValue(this.elem, 'bottom'),\n                width: this.getCssValue(this.elem, 'width'),\n            };\n            if (this.width === 'auto') {\n                this.width = this.originalCss.width;\n            }\n        };\n    /**\n     * @return {?}\n     */\n    StickyComponent.prototype.defineDimensions = /**\n     * @return {?}\n     */\n        function () {\n            var /** @type {?} */ containerTop = this.getBoundingClientRectValue(this.container, 'top');\n            this.windowHeight = window.innerHeight;\n            this.elemHeight = this.getCssNumber(this.elem, 'height');\n            this.containerHeight = this.getCssNumber(this.container, 'height');\n            this.containerStart = containerTop + this.scrollbarYPos() - this.offsetTop + this.start;\n            if (this.parentMode) {\n                this.scrollFinish = this.containerStart - this.start - this.offsetBottom + (this.containerHeight - this.elemHeight);\n            }\n            else {\n                this.scrollFinish = document.body.offsetHeight;\n            }\n        };\n    /**\n     * @return {?}\n     */\n    StickyComponent.prototype.resetElement = /**\n     * @return {?}\n     */\n        function () {\n            this.elem.classList.remove(this.stickClass);\n            Object.assign(this.elem.style, this.originalCss);\n            this.reset.next(this.elem);\n        };\n    /**\n     * @return {?}\n     */\n    StickyComponent.prototype.stuckElement = /**\n     * @return {?}\n     */\n        function () {\n            this.isStuck = true;\n            this.elem.classList.remove(this.endStickClass);\n            this.elem.classList.add(this.stickClass);\n            Object.assign(this.elem.style, {\n                zIndex: this.zIndex,\n                position: 'fixed',\n                top: this.offsetTop + 'px',\n                right: 'auto',\n                bottom: 'auto',\n                left: this.getBoundingClientRectValue(this.elem, 'left') + 'px',\n                width: this.width\n            });\n            this.activated.next(this.elem);\n        };\n    /**\n     * @return {?}\n     */\n    StickyComponent.prototype.unstuckElement = /**\n     * @return {?}\n     */\n        function () {\n            this.isStuck = false;\n            this.elem.classList.add(this.endStickClass);\n            this.container.style.position = 'relative';\n            Object.assign(this.elem.style, {\n                position: 'absolute',\n                top: 'auto',\n                left: 'auto',\n                right: this.getCssValue(this.elem, 'float') === 'right' || this.orientation === 'right' ? 0 : 'auto',\n                bottom: this.offsetBottom + 'px',\n                width: this.width\n            });\n            this.deactivated.next(this.elem);\n        };\n    /**\n     * @return {?}\n     */\n    StickyComponent.prototype.matchMediaQuery = /**\n     * @return {?}\n     */\n        function () {\n            if (!this.mediaQuery)\n                return true;\n            return (window.matchMedia('(' + this.mediaQuery + ')').matches ||\n                window.matchMedia(this.mediaQuery).matches);\n        };\n    /**\n     * @return {?}\n     */\n    StickyComponent.prototype.sticker = /**\n     * @return {?}\n     */\n        function () {\n            // check media query\n            if (this.isStuck && !this.matchMediaQuery()) {\n                this.resetElement();\n                return;\n            }\n            // detecting when a container's height changes\n            var /** @type {?} */ currentContainerHeight = this.getCssNumber(this.container, 'height');\n            if (currentContainerHeight !== this.containerHeight) {\n                this.defineDimensions();\n            }\n            // check if the sticky element is above the container\n            if (this.elemHeight >= currentContainerHeight) {\n                return;\n            }\n            var /** @type {?} */ position = this.scrollbarYPos();\n            // unstick\n            if (this.isStuck && (position < this.containerStart || position > this.scrollFinish) || position > this.scrollFinish) {\n                this.resetElement();\n                if (position > this.scrollFinish)\n                    this.unstuckElement();\n                this.isStuck = false;\n            }\n            else if (position > this.containerStart && position < this.scrollFinish) {\n                this.stuckElement();\n            }\n        };\n    /**\n     * @return {?}\n     */\n    StickyComponent.prototype.scrollbarYPos = /**\n     * @return {?}\n     */\n        function () {\n            return window.pageYOffset || document.documentElement.scrollTop;\n        };\n    /**\n     * @param {?} element\n     * @param {?} property\n     * @return {?}\n     */\n    StickyComponent.prototype.getBoundingClientRectValue = /**\n     * @param {?} element\n     * @param {?} property\n     * @return {?}\n     */\n        function (element, property) {\n            var /** @type {?} */ result = 0;\n            if (element && element.getBoundingClientRect) {\n                var /** @type {?} */ rect = element.getBoundingClientRect();\n                result = (typeof rect[property] !== 'undefined') ? rect[property] : 0;\n            }\n            return result;\n        };\n    /**\n     * @param {?} element\n     * @param {?} property\n     * @return {?}\n     */\n    StickyComponent.prototype.getCssValue = /**\n     * @param {?} element\n     * @param {?} property\n     * @return {?}\n     */\n        function (element, property) {\n            var /** @type {?} */ result = '';\n            if (typeof window.getComputedStyle !== 'undefined') {\n                result = window.getComputedStyle(element, '').getPropertyValue(property);\n            }\n            else if (typeof element.currentStyle !== 'undefined') {\n                result = element.currentStyle[property];\n            }\n            return result;\n        };\n    /**\n     * @param {?} element\n     * @param {?} property\n     * @return {?}\n     */\n    StickyComponent.prototype.getCssNumber = /**\n     * @param {?} element\n     * @param {?} property\n     * @return {?}\n     */\n        function (element, property) {\n            if (typeof element === 'undefined')\n                return 0;\n            return parseInt(this.getCssValue(element, property), 10) || 0;\n        };\n    return StickyComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar StickyModule = /*@__PURE__*/ (function () {\n    function StickyModule() {\n    }\n    return StickyModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Generated bundle index. Do not edit.\n */\nexport { StickyComponent, StickyModule };\n//# sourceMappingURL=ng2-sticky-kit.es5.js.map\n",null]}