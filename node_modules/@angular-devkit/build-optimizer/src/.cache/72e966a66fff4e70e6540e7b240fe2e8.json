{"remainingRequest":"C:\\laragon\\www\\hym\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!C:\\laragon\\www\\hym\\node_modules\\ng2-nvd3\\build\\lib\\ng2-nvd3.component.js","dependencies":[{"path":"C:\\laragon\\www\\hym\\node_modules\\ng2-nvd3\\build\\lib\\ng2-nvd3.component.js","mtime":1614017471857},{"path":"C:\\laragon\\www\\hym\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1614017462316},{"path":"C:\\laragon\\www\\hym\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1614017454693}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar core_1 = require(\"@angular/core\");\nvar NvD3Component = /*@__PURE__*/ (function () {\n    function NvD3Component(elementRef) {\n        this.el = elementRef.nativeElement;\n    }\n    NvD3Component.prototype.ngOnChanges = function (changes) {\n        if (this.options) {\n            if (!this.chart || this.chartType !== this.options.chart.type) {\n                this.initChart(this.options);\n            }\n            else {\n                this.updateWithOptions(this.options);\n            }\n        }\n    };\n    NvD3Component.prototype.ngOnDestroy = function () {\n        this.clearElement();\n    };\n    NvD3Component.prototype.initChart = function (options) {\n        var _this = this;\n        this.clearElement();\n        if (!options)\n            return;\n        this.chart = nv.models[options.chart.type]();\n        this.chartType = this.options.chart.type;\n        this.chart.id = Math.random().toString(36).substr(2, 15);\n        this.updateWithOptions(options);\n        nv.addGraph(function () {\n            if (!_this.chart)\n                return;\n            if (_this.chart.resizeHandler)\n                _this.chart.resizeHandler.clear();\n            _this.chart.resizeHandler = nv.utils.windowResize(function () {\n                _this.chart && _this.chart.update && _this.chart.update();\n            });\n            return _this.chart;\n        }, options.chart['callback']);\n    };\n    NvD3Component.prototype.updateWithOptions = function (options) {\n        if (!options)\n            return;\n        for (var key in this.chart) {\n            if (!this.chart.hasOwnProperty(key))\n                continue;\n            var value = this.chart[key];\n            if (key[0] === '_') { }\n            else if ([\n                'clearHighlights',\n                'highlightPoint',\n                'id',\n                'options',\n                'resizeHandler',\n                'state',\n                'open',\n                'close',\n                'tooltipContent'\n            ].indexOf(key) >= 0) { }\n            else if (key === 'dispatch')\n                this.configureEvents(this.chart[key], options.chart[key]);\n            else if ([\n                'bars',\n                'bars1',\n                'bars2',\n                'boxplot',\n                'bullet',\n                'controls',\n                'discretebar',\n                'distX',\n                'distY',\n                'interactiveLayer',\n                'legend',\n                'lines',\n                'lines1',\n                'lines2',\n                'multibar',\n                'pie',\n                'scatter',\n                'scatters1',\n                'scatters2',\n                'sparkline',\n                'stack1',\n                'stack2',\n                'sunburst',\n                'tooltip',\n                'x2Axis',\n                'xAxis',\n                'y1Axis',\n                'y2Axis',\n                'y3Axis',\n                'y4Axis',\n                'yAxis',\n                'yAxis1',\n                'yAxis2',\n                'sankeyChart'\n            ].indexOf(key) >= 0 ||\n                (key === 'stacked' && options.chart.type === 'stackedAreaChart')) {\n                this.configure(this.chart[key], options.chart[key], options.chart.type);\n            }\n            else if ((key === 'xTickFormat' || key === 'yTickFormat') && options.chart.type === 'lineWithFocusChart') {\n            }\n            else if ((key === 'tooltips') && options.chart.type === 'boxPlotChart') {\n            }\n            else if ((key === 'tooltipXContent' || key === 'tooltipYContent') && options.chart.type === 'scatterChart') {\n            }\n            else if (options.chart[key] === undefined || options.chart[key] === null) {\n            }\n            else\n                this.chart[key](options.chart[key]);\n        }\n        this.updateWithData(this.data);\n    };\n    NvD3Component.prototype.updateWithData = function (data) {\n        if (data) {\n            {\n                var svgElement = this.el.querySelector('svg');\n                if (!svgElement) {\n                    this.svg = d3.select(this.el).append('svg');\n                }\n                else {\n                    this.svg = d3.select(svgElement);\n                }\n            }\n            this.updateSize();\n            this.svg.datum(data).call(this.chart);\n        }\n    };\n    NvD3Component.prototype.updateSize = function () {\n        if (this.svg) {\n            var h = void 0, w = void 0;\n            if (h = this.options.chart.height) {\n                if (!isNaN(+h))\n                    h += 'px';\n                this.svg.attr('height', h).style({ height: h });\n            }\n            if (w = this.options.chart.width) {\n                if (!isNaN(+w))\n                    w += 'px';\n                this.svg.attr('width', w).style({ width: w });\n            }\n            else {\n                this.svg.attr('width', '100%').style({ width: '100%' });\n            }\n        }\n    };\n    NvD3Component.prototype.configure = function (chart, options, chartType) {\n        if (chart && options) {\n            for (var key in chart) {\n                if (!chart.hasOwnProperty(key))\n                    continue;\n                var value = chart[key];\n                if (key[0] === '_') {\n                }\n                else if (key === 'dispatch')\n                    this.configureEvents(value, options[key]);\n                else if (key === 'tooltip')\n                    this.configure(chart[key], options[key], chartType);\n                else if (key === 'contentGenerator') {\n                    if (options[key])\n                        chart[key](options[key]);\n                }\n                else if ([\n                    'axis',\n                    'clearHighlights',\n                    'defined',\n                    'highlightPoint',\n                    'nvPointerEventsClass',\n                    'options',\n                    'rangeBand',\n                    'rangeBands',\n                    'scatter',\n                    'open',\n                    'close'\n                ].indexOf(key) === -1) {\n                    if (options[key] === undefined || options[key] === null) {\n                    }\n                    else\n                        chart[key](options[key]);\n                }\n            }\n        }\n    };\n    NvD3Component.prototype.configureEvents = function (dispatch, options) {\n        if (dispatch && options) {\n            for (var key in dispatch) {\n                if (!dispatch.hasOwnProperty(key))\n                    continue;\n                var value = dispatch[key];\n                if (options[key] === undefined || options[key] === null) {\n                }\n                else\n                    dispatch.on(key + '._', options[key]);\n            }\n        }\n    };\n    NvD3Component.prototype.clearElement = function () {\n        this.el.innerHTML = '';\n        if (this.chart && this.chart.tooltip && this.chart.tooltip.id) {\n            d3.select('#' + this.chart.tooltip.id()).remove();\n        }\n        if (nv['graphs'] && this.chart) {\n            for (var i = nv['graphs'].length - 1; i >= 0; i--) {\n                if (nv['graphs'][i] && (nv['graphs'][i].id === this.chart.id)) {\n                    nv['graphs'].splice(i, 1);\n                }\n            }\n        }\n        if (nv.tooltip && nv.tooltip.cleanup) {\n            nv.tooltip.cleanup();\n        }\n        if (this.chart && this.chart.resizeHandler)\n            this.chart.resizeHandler.clear();\n        this.chart = null;\n    };\n    NvD3Component.decorators = [\n        { type: core_1.Component, args: [{\n                    selector: 'nvd3',\n                    template: \"\"\n                },] },\n    ];\n    NvD3Component.propDecorators = {\n        'options': [{ type: core_1.Input },],\n        'data': [{ type: core_1.Input },],\n    };\n    return NvD3Component;\n}());\nexports.NvD3Component = NvD3Component;\n",null]}