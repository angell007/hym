{"remainingRequest":"C:\\laragon\\www\\hym\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!C:\\laragon\\www\\hym\\node_modules\\js-sha256\\src\\sha256.js","dependencies":[{"path":"C:\\laragon\\www\\hym\\node_modules\\js-sha256\\src\\sha256.js","mtime":1598548662253},{"path":"C:\\laragon\\www\\hym\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1598548657832},{"path":"C:\\laragon\\www\\hym\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1598548652833}],"contextDependencies":[],"result":["/**\r\n * [js-sha256]{@link https://github.com/emn178/js-sha256}\r\n *\r\n * @version 0.9.0\r\n * @author Chen, Yi-Cyuan [emn178@gmail.com]\r\n * @copyright Chen, Yi-Cyuan 2014-2017\r\n * @license MIT\r\n */\r\n/*jslint bitwise: true */\r\n(function () {\r\n  'use strict';\r\n\r\n  var ERROR = 'input is invalid type';\r\n  var WINDOW = typeof window === 'object';\r\n  var root = WINDOW ? window : {};\r\n  if (root.JS_SHA256_NO_WINDOW) {\r\n    WINDOW = false;\r\n  }\r\n  var WEB_WORKER = !WINDOW && typeof self === 'object';\r\n  var NODE_JS = !root.JS_SHA256_NO_NODE_JS && typeof process === 'object' && process.versions && process.versions.node;\r\n  if (NODE_JS) {\r\n    root = global;\r\n  } else if (WEB_WORKER) {\r\n    root = self;\r\n  }\r\n  var COMMON_JS = !root.JS_SHA256_NO_COMMON_JS && typeof module === 'object' && module.exports;\r\n  var AMD = typeof define === 'function' && define.amd;\r\n  var ARRAY_BUFFER = !root.JS_SHA256_NO_ARRAY_BUFFER && typeof ArrayBuffer !== 'undefined';\r\n  var HEX_CHARS = '0123456789abcdef'.split('');\r\n  var EXTRA = [-2147483648, 8388608, 32768, 128];\r\n  var SHIFT = [24, 16, 8, 0];\r\n  var K = [\r\n    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\r\n    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\r\n    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\r\n    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\r\n    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\r\n    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\r\n    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\r\n    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\r\n  ];\r\n  var OUTPUT_TYPES = ['hex', 'array', 'digest', 'arrayBuffer'];\r\n\r\n  var blocks = [];\r\n\r\n  if (root.JS_SHA256_NO_NODE_JS || !Array.isArray) {\r\n    Array.isArray = function (obj) {\r\n      return Object.prototype.toString.call(obj) === '[object Array]';\r\n    };\r\n  }\r\n\r\n  if (ARRAY_BUFFER && (root.JS_SHA256_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) {\r\n    ArrayBuffer.isView = function (obj) {\r\n      return typeof obj === 'object' && obj.buffer && obj.buffer.constructor === ArrayBuffer;\r\n    };\r\n  }\r\n\r\n  var createOutputMethod = function (outputType, is224) {\r\n    return function (message) {\r\n      return new Sha256(is224, true).update(message)[outputType]();\r\n    };\r\n  };\r\n\r\n  var createMethod = function (is224) {\r\n    var method = createOutputMethod('hex', is224);\r\n    if (NODE_JS) {\r\n      method = nodeWrap(method, is224);\r\n    }\r\n    method.create = function () {\r\n      return new Sha256(is224);\r\n    };\r\n    method.update = function (message) {\r\n      return method.create().update(message);\r\n    };\r\n    for (var i = 0; i < OUTPUT_TYPES.length; ++i) {\r\n      var type = OUTPUT_TYPES[i];\r\n      method[type] = createOutputMethod(type, is224);\r\n    }\r\n    return method;\r\n  };\r\n\r\n  var nodeWrap = function (method, is224) {\r\n    var crypto = eval(\"require('crypto')\");\r\n    var Buffer = eval(\"require('buffer').Buffer\");\r\n    var algorithm = is224 ? 'sha224' : 'sha256';\r\n    var nodeMethod = function (message) {\r\n      if (typeof message === 'string') {\r\n        return crypto.createHash(algorithm).update(message, 'utf8').digest('hex');\r\n      } else {\r\n        if (message === null || message === undefined) {\r\n          throw new Error(ERROR);\r\n        } else if (message.constructor === ArrayBuffer) {\r\n          message = new Uint8Array(message);\r\n        }\r\n      }\r\n      if (Array.isArray(message) || ArrayBuffer.isView(message) ||\r\n        message.constructor === Buffer) {\r\n        return crypto.createHash(algorithm).update(new Buffer(message)).digest('hex');\r\n      } else {\r\n        return method(message);\r\n      }\r\n    };\r\n    return nodeMethod;\r\n  };\r\n\r\n  var createHmacOutputMethod = function (outputType, is224) {\r\n    return function (key, message) {\r\n      return new HmacSha256(key, is224, true).update(message)[outputType]();\r\n    };\r\n  };\r\n\r\n  var createHmacMethod = function (is224) {\r\n    var method = createHmacOutputMethod('hex', is224);\r\n    method.create = function (key) {\r\n      return new HmacSha256(key, is224);\r\n    };\r\n    method.update = function (key, message) {\r\n      return method.create(key).update(message);\r\n    };\r\n    for (var i = 0; i < OUTPUT_TYPES.length; ++i) {\r\n      var type = OUTPUT_TYPES[i];\r\n      method[type] = createHmacOutputMethod(type, is224);\r\n    }\r\n    return method;\r\n  };\r\n\r\n  function Sha256(is224, sharedMemory) {\r\n    if (sharedMemory) {\r\n      blocks[0] = blocks[16] = blocks[1] = blocks[2] = blocks[3] =\r\n        blocks[4] = blocks[5] = blocks[6] = blocks[7] =\r\n        blocks[8] = blocks[9] = blocks[10] = blocks[11] =\r\n        blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\r\n      this.blocks = blocks;\r\n    } else {\r\n      this.blocks = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\r\n    }\r\n\r\n    if (is224) {\r\n      this.h0 = 0xc1059ed8;\r\n      this.h1 = 0x367cd507;\r\n      this.h2 = 0x3070dd17;\r\n      this.h3 = 0xf70e5939;\r\n      this.h4 = 0xffc00b31;\r\n      this.h5 = 0x68581511;\r\n      this.h6 = 0x64f98fa7;\r\n      this.h7 = 0xbefa4fa4;\r\n    } else { // 256\r\n      this.h0 = 0x6a09e667;\r\n      this.h1 = 0xbb67ae85;\r\n      this.h2 = 0x3c6ef372;\r\n      this.h3 = 0xa54ff53a;\r\n      this.h4 = 0x510e527f;\r\n      this.h5 = 0x9b05688c;\r\n      this.h6 = 0x1f83d9ab;\r\n      this.h7 = 0x5be0cd19;\r\n    }\r\n\r\n    this.block = this.start = this.bytes = this.hBytes = 0;\r\n    this.finalized = this.hashed = false;\r\n    this.first = true;\r\n    this.is224 = is224;\r\n  }\r\n\r\n  Sha256.prototype.update = function (message) {\r\n    if (this.finalized) {\r\n      return;\r\n    }\r\n    var notString, type = typeof message;\r\n    if (type !== 'string') {\r\n      if (type === 'object') {\r\n        if (message === null) {\r\n          throw new Error(ERROR);\r\n        } else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {\r\n          message = new Uint8Array(message);\r\n        } else if (!Array.isArray(message)) {\r\n          if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {\r\n            throw new Error(ERROR);\r\n          }\r\n        }\r\n      } else {\r\n        throw new Error(ERROR);\r\n      }\r\n      notString = true;\r\n    }\r\n    var code, index = 0, i, length = message.length, blocks = this.blocks;\r\n\r\n    while (index < length) {\r\n      if (this.hashed) {\r\n        this.hashed = false;\r\n        blocks[0] = this.block;\r\n        blocks[16] = blocks[1] = blocks[2] = blocks[3] =\r\n          blocks[4] = blocks[5] = blocks[6] = blocks[7] =\r\n          blocks[8] = blocks[9] = blocks[10] = blocks[11] =\r\n          blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\r\n      }\r\n\r\n      if (notString) {\r\n        for (i = this.start; index < length && i < 64; ++index) {\r\n          blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];\r\n        }\r\n      } else {\r\n        for (i = this.start; index < length && i < 64; ++index) {\r\n          code = message.charCodeAt(index);\r\n          if (code < 0x80) {\r\n            blocks[i >> 2] |= code << SHIFT[i++ & 3];\r\n          } else if (code < 0x800) {\r\n            blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];\r\n            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\r\n          } else if (code < 0xd800 || code >= 0xe000) {\r\n            blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];\r\n            blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\r\n            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\r\n          } else {\r\n            code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));\r\n            blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];\r\n            blocks[i >> 2] |= (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];\r\n            blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\r\n            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\r\n          }\r\n        }\r\n      }\r\n\r\n      this.lastByteIndex = i;\r\n      this.bytes += i - this.start;\r\n      if (i >= 64) {\r\n        this.block = blocks[16];\r\n        this.start = i - 64;\r\n        this.hash();\r\n        this.hashed = true;\r\n      } else {\r\n        this.start = i;\r\n      }\r\n    }\r\n    if (this.bytes > 4294967295) {\r\n      this.hBytes += this.bytes / 4294967296 << 0;\r\n      this.bytes = this.bytes % 4294967296;\r\n    }\r\n    return this;\r\n  };\r\n\r\n  Sha256.prototype.finalize = function () {\r\n    if (this.finalized) {\r\n      return;\r\n    }\r\n    this.finalized = true;\r\n    var blocks = this.blocks, i = this.lastByteIndex;\r\n    blocks[16] = this.block;\r\n    blocks[i >> 2] |= EXTRA[i & 3];\r\n    this.block = blocks[16];\r\n    if (i >= 56) {\r\n      if (!this.hashed) {\r\n        this.hash();\r\n      }\r\n      blocks[0] = this.block;\r\n      blocks[16] = blocks[1] = blocks[2] = blocks[3] =\r\n        blocks[4] = blocks[5] = blocks[6] = blocks[7] =\r\n        blocks[8] = blocks[9] = blocks[10] = blocks[11] =\r\n        blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\r\n    }\r\n    blocks[14] = this.hBytes << 3 | this.bytes >>> 29;\r\n    blocks[15] = this.bytes << 3;\r\n    this.hash();\r\n  };\r\n\r\n  Sha256.prototype.hash = function () {\r\n    var a = this.h0, b = this.h1, c = this.h2, d = this.h3, e = this.h4, f = this.h5, g = this.h6,\r\n      h = this.h7, blocks = this.blocks, j, s0, s1, maj, t1, t2, ch, ab, da, cd, bc;\r\n\r\n    for (j = 16; j < 64; ++j) {\r\n      // rightrotate\r\n      t1 = blocks[j - 15];\r\n      s0 = ((t1 >>> 7) | (t1 << 25)) ^ ((t1 >>> 18) | (t1 << 14)) ^ (t1 >>> 3);\r\n      t1 = blocks[j - 2];\r\n      s1 = ((t1 >>> 17) | (t1 << 15)) ^ ((t1 >>> 19) | (t1 << 13)) ^ (t1 >>> 10);\r\n      blocks[j] = blocks[j - 16] + s0 + blocks[j - 7] + s1 << 0;\r\n    }\r\n\r\n    bc = b & c;\r\n    for (j = 0; j < 64; j += 4) {\r\n      if (this.first) {\r\n        if (this.is224) {\r\n          ab = 300032;\r\n          t1 = blocks[0] - 1413257819;\r\n          h = t1 - 150054599 << 0;\r\n          d = t1 + 24177077 << 0;\r\n        } else {\r\n          ab = 704751109;\r\n          t1 = blocks[0] - 210244248;\r\n          h = t1 - 1521486534 << 0;\r\n          d = t1 + 143694565 << 0;\r\n        }\r\n        this.first = false;\r\n      } else {\r\n        s0 = ((a >>> 2) | (a << 30)) ^ ((a >>> 13) | (a << 19)) ^ ((a >>> 22) | (a << 10));\r\n        s1 = ((e >>> 6) | (e << 26)) ^ ((e >>> 11) | (e << 21)) ^ ((e >>> 25) | (e << 7));\r\n        ab = a & b;\r\n        maj = ab ^ (a & c) ^ bc;\r\n        ch = (e & f) ^ (~e & g);\r\n        t1 = h + s1 + ch + K[j] + blocks[j];\r\n        t2 = s0 + maj;\r\n        h = d + t1 << 0;\r\n        d = t1 + t2 << 0;\r\n      }\r\n      s0 = ((d >>> 2) | (d << 30)) ^ ((d >>> 13) | (d << 19)) ^ ((d >>> 22) | (d << 10));\r\n      s1 = ((h >>> 6) | (h << 26)) ^ ((h >>> 11) | (h << 21)) ^ ((h >>> 25) | (h << 7));\r\n      da = d & a;\r\n      maj = da ^ (d & b) ^ ab;\r\n      ch = (h & e) ^ (~h & f);\r\n      t1 = g + s1 + ch + K[j + 1] + blocks[j + 1];\r\n      t2 = s0 + maj;\r\n      g = c + t1 << 0;\r\n      c = t1 + t2 << 0;\r\n      s0 = ((c >>> 2) | (c << 30)) ^ ((c >>> 13) | (c << 19)) ^ ((c >>> 22) | (c << 10));\r\n      s1 = ((g >>> 6) | (g << 26)) ^ ((g >>> 11) | (g << 21)) ^ ((g >>> 25) | (g << 7));\r\n      cd = c & d;\r\n      maj = cd ^ (c & a) ^ da;\r\n      ch = (g & h) ^ (~g & e);\r\n      t1 = f + s1 + ch + K[j + 2] + blocks[j + 2];\r\n      t2 = s0 + maj;\r\n      f = b + t1 << 0;\r\n      b = t1 + t2 << 0;\r\n      s0 = ((b >>> 2) | (b << 30)) ^ ((b >>> 13) | (b << 19)) ^ ((b >>> 22) | (b << 10));\r\n      s1 = ((f >>> 6) | (f << 26)) ^ ((f >>> 11) | (f << 21)) ^ ((f >>> 25) | (f << 7));\r\n      bc = b & c;\r\n      maj = bc ^ (b & d) ^ cd;\r\n      ch = (f & g) ^ (~f & h);\r\n      t1 = e + s1 + ch + K[j + 3] + blocks[j + 3];\r\n      t2 = s0 + maj;\r\n      e = a + t1 << 0;\r\n      a = t1 + t2 << 0;\r\n    }\r\n\r\n    this.h0 = this.h0 + a << 0;\r\n    this.h1 = this.h1 + b << 0;\r\n    this.h2 = this.h2 + c << 0;\r\n    this.h3 = this.h3 + d << 0;\r\n    this.h4 = this.h4 + e << 0;\r\n    this.h5 = this.h5 + f << 0;\r\n    this.h6 = this.h6 + g << 0;\r\n    this.h7 = this.h7 + h << 0;\r\n  };\r\n\r\n  Sha256.prototype.hex = function () {\r\n    this.finalize();\r\n\r\n    var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3, h4 = this.h4, h5 = this.h5,\r\n      h6 = this.h6, h7 = this.h7;\r\n\r\n    var hex = HEX_CHARS[(h0 >> 28) & 0x0F] + HEX_CHARS[(h0 >> 24) & 0x0F] +\r\n      HEX_CHARS[(h0 >> 20) & 0x0F] + HEX_CHARS[(h0 >> 16) & 0x0F] +\r\n      HEX_CHARS[(h0 >> 12) & 0x0F] + HEX_CHARS[(h0 >> 8) & 0x0F] +\r\n      HEX_CHARS[(h0 >> 4) & 0x0F] + HEX_CHARS[h0 & 0x0F] +\r\n      HEX_CHARS[(h1 >> 28) & 0x0F] + HEX_CHARS[(h1 >> 24) & 0x0F] +\r\n      HEX_CHARS[(h1 >> 20) & 0x0F] + HEX_CHARS[(h1 >> 16) & 0x0F] +\r\n      HEX_CHARS[(h1 >> 12) & 0x0F] + HEX_CHARS[(h1 >> 8) & 0x0F] +\r\n      HEX_CHARS[(h1 >> 4) & 0x0F] + HEX_CHARS[h1 & 0x0F] +\r\n      HEX_CHARS[(h2 >> 28) & 0x0F] + HEX_CHARS[(h2 >> 24) & 0x0F] +\r\n      HEX_CHARS[(h2 >> 20) & 0x0F] + HEX_CHARS[(h2 >> 16) & 0x0F] +\r\n      HEX_CHARS[(h2 >> 12) & 0x0F] + HEX_CHARS[(h2 >> 8) & 0x0F] +\r\n      HEX_CHARS[(h2 >> 4) & 0x0F] + HEX_CHARS[h2 & 0x0F] +\r\n      HEX_CHARS[(h3 >> 28) & 0x0F] + HEX_CHARS[(h3 >> 24) & 0x0F] +\r\n      HEX_CHARS[(h3 >> 20) & 0x0F] + HEX_CHARS[(h3 >> 16) & 0x0F] +\r\n      HEX_CHARS[(h3 >> 12) & 0x0F] + HEX_CHARS[(h3 >> 8) & 0x0F] +\r\n      HEX_CHARS[(h3 >> 4) & 0x0F] + HEX_CHARS[h3 & 0x0F] +\r\n      HEX_CHARS[(h4 >> 28) & 0x0F] + HEX_CHARS[(h4 >> 24) & 0x0F] +\r\n      HEX_CHARS[(h4 >> 20) & 0x0F] + HEX_CHARS[(h4 >> 16) & 0x0F] +\r\n      HEX_CHARS[(h4 >> 12) & 0x0F] + HEX_CHARS[(h4 >> 8) & 0x0F] +\r\n      HEX_CHARS[(h4 >> 4) & 0x0F] + HEX_CHARS[h4 & 0x0F] +\r\n      HEX_CHARS[(h5 >> 28) & 0x0F] + HEX_CHARS[(h5 >> 24) & 0x0F] +\r\n      HEX_CHARS[(h5 >> 20) & 0x0F] + HEX_CHARS[(h5 >> 16) & 0x0F] +\r\n      HEX_CHARS[(h5 >> 12) & 0x0F] + HEX_CHARS[(h5 >> 8) & 0x0F] +\r\n      HEX_CHARS[(h5 >> 4) & 0x0F] + HEX_CHARS[h5 & 0x0F] +\r\n      HEX_CHARS[(h6 >> 28) & 0x0F] + HEX_CHARS[(h6 >> 24) & 0x0F] +\r\n      HEX_CHARS[(h6 >> 20) & 0x0F] + HEX_CHARS[(h6 >> 16) & 0x0F] +\r\n      HEX_CHARS[(h6 >> 12) & 0x0F] + HEX_CHARS[(h6 >> 8) & 0x0F] +\r\n      HEX_CHARS[(h6 >> 4) & 0x0F] + HEX_CHARS[h6 & 0x0F];\r\n    if (!this.is224) {\r\n      hex += HEX_CHARS[(h7 >> 28) & 0x0F] + HEX_CHARS[(h7 >> 24) & 0x0F] +\r\n        HEX_CHARS[(h7 >> 20) & 0x0F] + HEX_CHARS[(h7 >> 16) & 0x0F] +\r\n        HEX_CHARS[(h7 >> 12) & 0x0F] + HEX_CHARS[(h7 >> 8) & 0x0F] +\r\n        HEX_CHARS[(h7 >> 4) & 0x0F] + HEX_CHARS[h7 & 0x0F];\r\n    }\r\n    return hex;\r\n  };\r\n\r\n  Sha256.prototype.toString = Sha256.prototype.hex;\r\n\r\n  Sha256.prototype.digest = function () {\r\n    this.finalize();\r\n\r\n    var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3, h4 = this.h4, h5 = this.h5,\r\n      h6 = this.h6, h7 = this.h7;\r\n\r\n    var arr = [\r\n      (h0 >> 24) & 0xFF, (h0 >> 16) & 0xFF, (h0 >> 8) & 0xFF, h0 & 0xFF,\r\n      (h1 >> 24) & 0xFF, (h1 >> 16) & 0xFF, (h1 >> 8) & 0xFF, h1 & 0xFF,\r\n      (h2 >> 24) & 0xFF, (h2 >> 16) & 0xFF, (h2 >> 8) & 0xFF, h2 & 0xFF,\r\n      (h3 >> 24) & 0xFF, (h3 >> 16) & 0xFF, (h3 >> 8) & 0xFF, h3 & 0xFF,\r\n      (h4 >> 24) & 0xFF, (h4 >> 16) & 0xFF, (h4 >> 8) & 0xFF, h4 & 0xFF,\r\n      (h5 >> 24) & 0xFF, (h5 >> 16) & 0xFF, (h5 >> 8) & 0xFF, h5 & 0xFF,\r\n      (h6 >> 24) & 0xFF, (h6 >> 16) & 0xFF, (h6 >> 8) & 0xFF, h6 & 0xFF\r\n    ];\r\n    if (!this.is224) {\r\n      arr.push((h7 >> 24) & 0xFF, (h7 >> 16) & 0xFF, (h7 >> 8) & 0xFF, h7 & 0xFF);\r\n    }\r\n    return arr;\r\n  };\r\n\r\n  Sha256.prototype.array = Sha256.prototype.digest;\r\n\r\n  Sha256.prototype.arrayBuffer = function () {\r\n    this.finalize();\r\n\r\n    var buffer = new ArrayBuffer(this.is224 ? 28 : 32);\r\n    var dataView = new DataView(buffer);\r\n    dataView.setUint32(0, this.h0);\r\n    dataView.setUint32(4, this.h1);\r\n    dataView.setUint32(8, this.h2);\r\n    dataView.setUint32(12, this.h3);\r\n    dataView.setUint32(16, this.h4);\r\n    dataView.setUint32(20, this.h5);\r\n    dataView.setUint32(24, this.h6);\r\n    if (!this.is224) {\r\n      dataView.setUint32(28, this.h7);\r\n    }\r\n    return buffer;\r\n  };\r\n\r\n  function HmacSha256(key, is224, sharedMemory) {\r\n    var i, type = typeof key;\r\n    if (type === 'string') {\r\n      var bytes = [], length = key.length, index = 0, code;\r\n      for (i = 0; i < length; ++i) {\r\n        code = key.charCodeAt(i);\r\n        if (code < 0x80) {\r\n          bytes[index++] = code;\r\n        } else if (code < 0x800) {\r\n          bytes[index++] = (0xc0 | (code >> 6));\r\n          bytes[index++] = (0x80 | (code & 0x3f));\r\n        } else if (code < 0xd800 || code >= 0xe000) {\r\n          bytes[index++] = (0xe0 | (code >> 12));\r\n          bytes[index++] = (0x80 | ((code >> 6) & 0x3f));\r\n          bytes[index++] = (0x80 | (code & 0x3f));\r\n        } else {\r\n          code = 0x10000 + (((code & 0x3ff) << 10) | (key.charCodeAt(++i) & 0x3ff));\r\n          bytes[index++] = (0xf0 | (code >> 18));\r\n          bytes[index++] = (0x80 | ((code >> 12) & 0x3f));\r\n          bytes[index++] = (0x80 | ((code >> 6) & 0x3f));\r\n          bytes[index++] = (0x80 | (code & 0x3f));\r\n        }\r\n      }\r\n      key = bytes;\r\n    } else {\r\n      if (type === 'object') {\r\n        if (key === null) {\r\n          throw new Error(ERROR);\r\n        } else if (ARRAY_BUFFER && key.constructor === ArrayBuffer) {\r\n          key = new Uint8Array(key);\r\n        } else if (!Array.isArray(key)) {\r\n          if (!ARRAY_BUFFER || !ArrayBuffer.isView(key)) {\r\n            throw new Error(ERROR);\r\n          }\r\n        }\r\n      } else {\r\n        throw new Error(ERROR);\r\n      }\r\n    }\r\n\r\n    if (key.length > 64) {\r\n      key = (new Sha256(is224, true)).update(key).array();\r\n    }\r\n\r\n    var oKeyPad = [], iKeyPad = [];\r\n    for (i = 0; i < 64; ++i) {\r\n      var b = key[i] || 0;\r\n      oKeyPad[i] = 0x5c ^ b;\r\n      iKeyPad[i] = 0x36 ^ b;\r\n    }\r\n\r\n    Sha256.call(this, is224, sharedMemory);\r\n\r\n    this.update(iKeyPad);\r\n    this.oKeyPad = oKeyPad;\r\n    this.inner = true;\r\n    this.sharedMemory = sharedMemory;\r\n  }\r\n  HmacSha256.prototype = new Sha256();\r\n\r\n  HmacSha256.prototype.finalize = function () {\r\n    Sha256.prototype.finalize.call(this);\r\n    if (this.inner) {\r\n      this.inner = false;\r\n      var innerHash = this.array();\r\n      Sha256.call(this, this.is224, this.sharedMemory);\r\n      this.update(this.oKeyPad);\r\n      this.update(innerHash);\r\n      Sha256.prototype.finalize.call(this);\r\n    }\r\n  };\r\n\r\n  var exports = createMethod();\r\n  exports.sha256 = exports;\r\n  exports.sha224 = createMethod(true);\r\n  exports.sha256.hmac = createHmacMethod();\r\n  exports.sha224.hmac = createHmacMethod(true);\r\n\r\n  if (COMMON_JS) {\r\n    module.exports = exports;\r\n  } else {\r\n    root.sha256 = exports.sha256;\r\n    root.sha224 = exports.sha224;\r\n    if (AMD) {\r\n      define(function () {\r\n        return exports;\r\n      });\r\n    }\r\n  }\r\n})();\r\n",null]}