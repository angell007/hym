import { Input, forwardRef, Component, ViewChild, Output, Renderer2, EventEmitter, IterableDiffers } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import cloneDeep from 'lodash.clonedeep';
export var SELECTIZE_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(function () { return NgSelectizeComponent; }),
    multi: true
};
var NgSelectizeComponent = (function () {
    function NgSelectizeComponent(_differs, renderer) {
        this._differs = _differs;
        this.renderer = renderer;
        this.enabled = true;
        this.onBlur = new EventEmitter(false);
    }
    NgSelectizeComponent.prototype.ngOnInit = function () {
        if (this.id && this.id.length > 0) {
            this.renderer.setAttribute(this.selectizeInput.nativeElement, 'id', this.id);
        }
        this.reset();
    };
    NgSelectizeComponent.prototype.reset = function () {
        this.selectize = $(this.selectizeInput.nativeElement).selectize(this.config)[0].selectize;
        this.selectize.on('change', this.onSelectizeValueChange.bind(this));
        this.selectize.on('blur', this.onBlurEvent.bind(this));
        this.updatePlaceholder();
        this.onEnabledStatusChange();
    };
    /**
     * Change detection for primitive types.
     */
    NgSelectizeComponent.prototype.ngOnChanges = function (changes) {
        if (this.selectize) {
            if (changes.hasOwnProperty('placeholder') || changes.hasOwnProperty('hasOptionsPlaceholder')
                || changes.hasOwnProperty('noOptionsPlaceholder')) {
                this.updatePlaceholder();
            }
            if (changes.hasOwnProperty('enabled')) {
                this.onEnabledStatusChange();
            }
        }
    };
    /**
     * Implementing deep check for option comparison
     *
     * FIXME -> Implement deep check to only compare against label and value fields.
     */
    NgSelectizeComponent.prototype.ngDoCheck = function () {
        if (this._options_differ) {
            var changes = this._options_differ.diff(this._options);
            if (changes) {
                this._applyOptionsChanges(changes);
            }
        }
        if (this._optgroups_differ) {
            var changes = this._optgroups_differ.diff(this._optgroups);
            if (changes) {
                this._applyOptionGroupChanges(changes);
            }
        }
    };
    NgSelectizeComponent.prototype._applyOptionsChanges = function (changes) {
        var _this = this;
        changes.forEachAddedItem(function (record) {
            _this.onSelectizeOptionAdd(record.item);
        });
        changes.forEachRemovedItem(function (record) {
            _this.onSelectizeOptionRemove(record.item);
        });
        this.updatePlaceholder();
        this.evalHasError();
    };
    NgSelectizeComponent.prototype._applyOptionGroupChanges = function (changes) {
        var _this = this;
        changes.forEachAddedItem(function (record) {
            _this.onSelectizeOptGroupAdd(record.item);
        });
        changes.forEachRemovedItem(function (record) {
            _this.onSelectizeOptGroupRemove(record.item);
        });
        this.updatePlaceholder();
        this.evalHasError();
    };
    NgSelectizeComponent.prototype.onBlurEvent = function () {
        if (this.formControl) {
            this.formControl.markAsTouched();
        }
        this.onBlur.emit();
        this.evalHasError();
    };
    NgSelectizeComponent.prototype.onSelectizeOptGroupAdd = function (optgroup) {
        this.selectize.addOptionGroup(optgroup[this.getOptgroupField()], optgroup);
    };
    NgSelectizeComponent.prototype.onSelectizeOptGroupRemove = function (optgroup) {
        this.selectize.removeOptionGroup(optgroup[this.getOptgroupField()]);
    };
    /**
     * Refresh selected values when options change.
     */
    NgSelectizeComponent.prototype.onSelectizeOptionAdd = function (option) {
        this.selectize.addOption(cloneDeep(option));
        var valueField = this.getValueField();
        if (this.value) {
            var items = (typeof this.value === 'string' || typeof this.value === 'number') ? [this.value] : this.value;
            if (items && items instanceof Array && items.find(function (value) { return value === option[valueField]; })) {
                this.selectize.addItem(option[valueField], true);
            }
        }
    };
    NgSelectizeComponent.prototype.onSelectizeOptionRemove = function (option) {
        this.selectize.removeOption(option[this.getValueField()]);
    };
    NgSelectizeComponent.prototype.evalHasError = function () {
        var parent = $(this.selectize.$control).parent();
        if (this.formControl) {
            if (this.formControl.touched && this.formControl.invalid) {
                parent.addClass(this.errorClass || 'has-error');
            }
            else if (parent.hasClass('has-error')) {
                parent.removeClass(this.errorClass || 'has-error');
            }
        }
    };
    /**
     * Update the current placeholder based on the given input parameter.
     */
    NgSelectizeComponent.prototype.updatePlaceholder = function () {
        if (this.selectize.items.length === 0 && this.selectize.settings.placeholder !== this.getPlaceholder()) {
            this.selectize.settings.placeholder = this.getPlaceholder();
            this.selectize.updatePlaceholder();
            this.selectize.showInput(); // Without this, when options are cleared placeholder only appears after focus.
        }
    };
    /**
     * Called when a change is detected in the 'enabled' input field.
     * Sets the selectize state based on the new value.
     */
    NgSelectizeComponent.prototype.onEnabledStatusChange = function () {
        this.enabled ? this.selectize.enable() : this.selectize.disable();
    };
    /**
     * Dispatches change event when a value change is detected.
     * @param $event
     */
    NgSelectizeComponent.prototype.onSelectizeValueChange = function ($event) {
        // In some cases this gets called before registerOnChange.
        if (this.onChangeCallback) {
            this.onChangeCallback(this.selectize.getValue());
        }
    };
    /**
     * Returns the applicable placeholder.
     */
    NgSelectizeComponent.prototype.getPlaceholder = function () {
        if (this.hasOptionsPlaceholder) {
            if (this.options && this.options.length > 0) {
                return this.hasOptionsPlaceholder;
            }
        }
        if (this.noOptionsPlaceholder) {
            if (!this.options || this.options.length === 0) {
                return this.noOptionsPlaceholder;
            }
        }
        return this.placeholder;
    };
    /**
     * Implementation from ControlValueAccessor
     *
     * Empty check on 'obj' removed due to restriction on resetting the field.
     * From testing, async should still function appropriately.
     *
     * FIXME This might not be necessary anymore..
     *
     * @param obj
     */
    NgSelectizeComponent.prototype.writeValue = function (obj) {
        if (obj !== this.value) {
            this.value = obj;
        }
        this.selectize.setValue(this.value);
    };
    /**
     * Implementation from ControlValueAccessor, callback for (ngModelChange)
     * @param fn
     */
    NgSelectizeComponent.prototype.registerOnChange = function (fn) {
        this.onChangeCallback = fn;
    };
    /**
     * Implementation from ControlValueAccessor
     * @param fn
     */
    NgSelectizeComponent.prototype.registerOnTouched = function (fn) {
        this.onTouchedCallback = fn;
    };
    NgSelectizeComponent.prototype.getValueField = function () {
        return this.config['valueField'] ? this.config['valueField'] : 'value';
    };
    NgSelectizeComponent.prototype.getOptgroupField = function () {
        return this.config['optgroupField'] ? this.config['optgroupField'] : 'optgroup';
    };
    Object.defineProperty(NgSelectizeComponent.prototype, "options", {
        get: function () {
            return this._options;
        },
        set: function (value) {
            this._options = value;
            if (!this._options_differ && value) {
                this._options_differ = this._differs.find(value).create();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgSelectizeComponent.prototype, "optgroups", {
        get: function () {
            return this._optgroups;
        },
        set: function (value) {
            this._optgroups = value;
            if (!this._optgroups_differ && value) {
                this._optgroups_differ = this._differs.find(value).create();
            }
        },
        enumerable: true,
        configurable: true
    });
    return NgSelectizeComponent;
}());
export { NgSelectizeComponent };
NgSelectizeComponent.decorators = [
    { type: Component, args: [{
                selector: 'ng-selectize',
                template: "<select #selectizeInput></select>",
                providers: [SELECTIZE_VALUE_ACCESSOR]
            },] },
];
/** @nocollapse */
NgSelectizeComponent.ctorParameters = function () { return [
    { type: IterableDiffers, },
    { type: Renderer2, },
]; };
NgSelectizeComponent.propDecorators = {
    'config': [{ type: Input },],
    'id': [{ type: Input },],
    'placeholder': [{ type: Input },],
    'hasOptionsPlaceholder': [{ type: Input },],
    'noOptionsPlaceholder': [{ type: Input },],
    'enabled': [{ type: Input },],
    'value': [{ type: Input },],
    'formControl': [{ type: Input },],
    'errorClass': [{ type: Input },],
    'onBlur': [{ type: Output },],
    'selectizeInput': [{ type: ViewChild, args: ['selectizeInput',] },],
    'options': [{ type: Input },],
    'optgroups': [{ type: Input },],
};
//# sourceMappingURL=ng-selectize.component.js.map